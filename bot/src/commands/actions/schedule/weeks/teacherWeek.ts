import { Composer, Markup } from 'telegraf'
import {
  batchButtons,
  callbackIdBuild,
  callbackIdParse,
  dateToCallback,
  replyKeyboards,
  SuperDuperUpgradedContext,
  WeeksArchiveType
} from '../../../../utils'
import { Parser } from '../../../../parser'
import { getWeekStart, Keeper, lessonsToMessage, weekToHuman } from '../../../../keeper'
import { UserState } from '../../../../schemas/User'

export const teacherWeekHandler = new Composer<SuperDuperUpgradedContext>()

const parser = new Parser(process.env.PARSER_URL!)
const keeper = new Keeper(process.env.KEEPER_URL!)

teacherWeekHandler.action(/teacher_week*/, async (ctx) => {
  const [ , ...args ] = callbackIdParse(ctx.match.input)
  const [ teacherName, weekStartRaw ] = args

  if (!teacherName) {
    ctx.user.state = UserState.AskingWeekTeacher
    await ctx.user.save()

    await ctx.answerCbQuery()
    await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([ [] ]).reply_markup)

    await ctx.reply('ü§®', {
      reply_markup: replyKeyboards[ctx.user.state].resize().reply_markup
    })

    await ctx.editMessageText('üßÑ –ù–∞–ø–∏—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å\n\n–û–±—ã—á–Ω–æ –æ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò. –û.')
  } else if (!weekStartRaw) {
    const weekStartDate = new Date()
    weekStartDate.setTime(weekStartDate.getTime() + (3 * 60 ** 2 * 1e3))

    const weekStart = getWeekStart(weekStartDate)

    const weeks = await keeper.getWeeks({
      // from: weekStart,
      teachers: teacherName
    })

    const actualWeeks = weeks.filter(w => w.getTime() >= weekStart.getTime())

    if (!weeks.length) {
      await ctx.answerCbQuery()
      await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([ [] ]).reply_markup)
      return await ctx.reply('üßâ –ö–∞–∂–µ—Ç—Å—è –∫—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∫–∞–π—Ñ—É–µ—Ç')
    }

    const buttons = batchButtons(
      actualWeeks.sort((a, b) => a.getTime() - b.getTime()).map((week) =>
        Markup.button.callback(
          weekToHuman(week),
          callbackIdBuild('teacher_week', [ teacherName, dateToCallback(week) ])
        )
      ),
      3,
      weeks.length !== actualWeeks.length
        ? [ [ Markup.button.callback('üöΩ –ê—Ä—Ö–∏–≤ –Ω–µ–¥–µ–ª—å', callbackIdBuild(
          'week', [ 'archive', WeeksArchiveType.Teacher, teacherName ])) ] ]
        : []
    )

    await ctx.editMessageText('üö∏ –í—ã–±–µ—Ä–∏ –Ω–µ–¥–µ–ª—é')
    await ctx.editMessageReplyMarkup(buttons.reply_markup)
  } else {
    const weekStart = new Date(weekStartRaw)
    const weekEnd = new Date(weekStartRaw)
    weekEnd.setTime(weekStart.getTime() + (7 * 24 * 60 ** 2 * 1e3))

    const lessons = await keeper.getLessons({
      teachers: [ teacherName ],
      from: weekStart,
      before: weekEnd
    })

    if (!lessons.length) {
      await ctx.answerCbQuery()
      await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([ [] ]).reply_markup)
      return await ctx.editMessageText('ü™§ –ï–º–∞–µ, –Ω–µ–ª–æ–≤–∫–æ –∫–∞–∫-—Ç–æ –≤—ã—à–ª–æ)') // –Ω–µ–¥–µ–ª—è –Ω–∞—à–ª–∞—Å—å, –Ω–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–Ω–∏—è. –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –≤—Å–µ –∂–µ

    }

    await ctx.answerCbQuery()

    const groups = await parser.getGroups()

    const currentDate = new Date()
    currentDate.setTime(currentDate.getTime() + (3 * 60 ** 2 * 1e3))
    const diff = weekStart.getTime() - currentDate.getTime()
    const weekDiff = Math.ceil(diff / (7 * 24 * 60 ** 2 * 1e3))

    const target = weekDiff === 0 ? '—Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' : `${weekDiff + 1} –Ω–µ–¥–µ–ª—é`

    const messagesContent = lessonsToMessage(lessons, groups)

    for (let i = 0; i < messagesContent.length; i++) {
      let content = i === 0
        ? `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${target} —É ${teacherName}\n`
        : ''

      content += messagesContent[i] + '\n\n'
        + '‚ù§Ô∏è‚Äçüî• <a href="https://bitor.in/donate">–ü–û–î–î–ï–†–ñ–ê–¢–¨ –ú–ê–¢–ï–†–ò–ê–õ–¨–ù–û!!</a>'

      if (i === 0) {
        await ctx.editMessageText(content, { parse_mode: 'HTML', disable_web_page_preview: true })
      } else {
        await ctx.reply(content, { parse_mode: 'HTML', disable_web_page_preview: true })
      }
    }
  }
})