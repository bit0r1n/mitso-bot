import { Markup } from 'telegraf'
import { UserRole, UserState } from '../../schemas/User'
import { AbstractSlashCommand, batchButtons, callbackIdBuild, CommandUtils, keyboards, SlashCommandContext } from '../../utils'

export class StartCommand extends AbstractSlashCommand {
  constructor(utils: CommandUtils) {
    super('start', utils)
  }

  async execute(ctx: SlashCommandContext) {
    if (ctx.newUser) {
      await ctx.reply('üçâ –ü—Ä–∏–≤–µ—Ç, —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n–¢–æ–ª—å–∫–æ –º–Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫—Ç–æ —Ç—ã üò´')
      return await ctx.reply('ü§® –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è –æ—Ç –∫–∞–∫–æ–≥–æ –ª–∏—Ü–∞ —Ç—ã —Ç—É—Ç', {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('–°—Ç—É–¥–µ–Ω—Ç', callbackIdBuild('settings', [ 'role', 'student' ])),
            Markup.button.callback('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', callbackIdBuild('settings', [ 'role', 'teacher' ])),
          ]
        ]).reply_markup
      })
    }
  
    const state = ctx.user.state
  
    switch (state) {
      case UserState.MainMenu: {
        return await ctx.reply('üçâ –•–≤–∞—Ç–∞–π –º–µ–Ω—é', {
          reply_markup: keyboards[state].resize().reply_markup
        })
      }
      case UserState.AskingFollowingEntity: {
        const askingText = ctx.user.role !== UserRole.Teacher
          ? '–ü–æ–≥–æ–¥–∏, —è –ø–æ–∫–∞ –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã'
          : '–ü–æ–≥–æ–¥–∏, —è –ø–æ–∫–∞ –∂–¥—É –æ—Ç —Ç–µ–±—è –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'
        return await ctx.reply('üçÜ ' + askingText, {
          reply_markup: keyboards[state].resize().reply_markup
        })
      }
      case UserState.ChoosingFollowingEntity: {
        const buttons = ctx.user.role !== UserRole.Teacher
          ? ctx.user.choosing_groups!
            .map(g => Markup.button.callback(
              g.display,
              callbackIdBuild('select_entity', [ g.id ])
            ))
          : ctx.user.choosing_teachers!
            .map(t => Markup.button.callback(
              t,
              callbackIdBuild('select_entity', [ t ])
            ))
        return await ctx.reply('üëû –í—ã–±–µ—Ä–∏ ' + (ctx.user.role === UserRole.Teacher ? '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' : '–≥—Ä—É–ø–ø—É'), {
          reply_markup: batchButtons(buttons).reply_markup
        })
      }
      case UserState.AskingWeekGroup: {
        await ctx.reply('ü•• –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å', {
          reply_markup: keyboards[state].resize().reply_markup
        })
        return
      }
      case UserState.AskingWeekTeacher: {
        await ctx.reply('üìõ –ù–∞–ø–∏—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å', {
          reply_markup: keyboards[state].resize().reply_markup
        })
        return
      }
    }
  }
}