import { Markup } from 'telegraf'
import { UserState } from '../../schemas/User'
import { AbstractSlashCommand, CommandUtils, SlashCommandContext } from '../../utils/commandHelpers'
import { batchButtons, callbackIdBuild, keyboards } from '../../utils/keyboards'

export class StartCommand extends AbstractSlashCommand {
  constructor(utils: CommandUtils) {
    super('start', utils)
  }

  async execute(ctx: SlashCommandContext) {
    if (ctx.newUser) {
      await ctx.reply('üçâ –ü—Ä–∏–≤–µ—Ç, —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n–¢–æ–ª—å–∫–æ –º–Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É üò´')
      await ctx.reply('ü§® –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º —Ç–≤–æ—é –≥—Ä—É–ø–ø—É. –ù–∞–ø–∏—à–∏ –µ—ë –Ω–æ–º–µ—Ä')
      return
    }
  
    const state = ctx.user.state
  
    switch (state) {
    case UserState.MainMenu: {
      await ctx.reply('üçâ –•–≤–∞—Ç–∞–π –º–µ–Ω—é', {
        reply_markup: keyboards[state].resize().reply_markup
      })
      return
    }
    case UserState.AskingGroup: {
      await ctx.reply('üçÜ –ü–æ–≥–æ–¥–∏, —è –ø–æ–∫–∞ –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã', {
        reply_markup: keyboards[state].resize().reply_markup
      })
      return
    }
    case UserState.ChoosingGroup: {
      await ctx.reply('üëû –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', {
        reply_markup: batchButtons(
            ctx.user.choosing_groups!
              .map(g => Markup.button.callback(
                g.display!,
                callbackIdBuild('select_group', [ g.id! ])
              ))
        ).reply_markup
      })
      return
    }
    case UserState.AskingWeekGroup: {
      await ctx.reply('ü•• –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —Ä–∞—Å–ø–∏–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å', {
        reply_markup: keyboards[state].resize().reply_markup
      })
      return
    }
    case UserState.AskingWeekTeacher: {
      await ctx.reply('üìõ –ù–∞–ø–∏—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å', {
        reply_markup: keyboards[state].resize().reply_markup
      })
      return
    }
    }
  }
}