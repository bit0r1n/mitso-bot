import { Composer, Markup } from 'telegraf'
import { batchButtons, callbackIdBuild, inlineKeyboards, replyKeyboards, SuperDuperUpgradedContext } from '../utils'
import { message } from 'telegraf/filters'
import { UserRole, UserState } from '../schemas/User'
import { Parser } from '../parser'
import { Keeper } from '../keeper'

export const chatHandler = new Composer<SuperDuperUpgradedContext>()

const parser = new Parser(process.env.PARSER_URL!)
const keeper = new Keeper(process.env.KEEPER_URL!)

chatHandler.on(message('text'), async (ctx) => {
  if (ctx.newUser) {
    await ctx.reply('ü§Ø –ß—Ç–æ-—Ç–æ —è —Ç–µ–±—è –Ω–µ –≤–∏–¥–∞–ª. –õ–∞–¥–Ω–æ, —Å–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º—Å—è. –í—ã–±–µ—Ä–∏ –∫—Ç–æ —Ç—ã', {
      reply_markup: inlineKeyboards.chooseRole.reply_markup
    })
    return
  }

  if (ctx.user.state === UserState.AskingWeekGroup) {
    if (ctx.message.text.length < 2) {
      return await ctx.reply('üò® –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–ø—Ä–æ—Å')
    }

    const groups = await parser.getGroups({ display: ctx.message.text })

    if (!groups.length) {
      return await ctx.reply('ü•∫ –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã')
    }

    ctx.user.state = UserState.MainMenu
    await ctx.user.save()

    ctx.reply('ü§®', {
      reply_markup: replyKeyboards[ctx.user.state].resize().reply_markup
    })

    await ctx.reply('üçç –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', {
      reply_markup: batchButtons(
        groups.map(g => Markup.button.callback(g.display, callbackIdBuild('group_week', [ g.id! ]))),
        3
      ).reply_markup
    })
  }

  if (ctx.user.state === UserState.AskingWeekTeacher) {
    if (ctx.message.text.length < 3) {
      return await ctx.reply('üò® –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–ø—Ä–æ—Å')
    }

    const teachers: string[] = await keeper.getTeachers({ name: ctx.message.text })

    if (!teachers.length) {
      await ctx.reply('ü•∫ –¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É')
      return
    }

    ctx.user.state = UserState.MainMenu
    await ctx.user.save()

    await ctx.reply('ü§®', {
      reply_markup: replyKeyboards[ctx.user.state].resize().reply_markup
    })

    await ctx.reply('üçç –í—ã–±–µ—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', {
      reply_markup: batchButtons(
        teachers.map(t => Markup.button.callback(t, callbackIdBuild('teacher_week', [ t ]))),
        3
      ).reply_markup
    })
  }

  if (ctx.user.state === UserState.AskingFollowingEntity) {
    if (ctx.message.text.length < 2) {
      return await ctx.reply('üò® –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–ø—Ä–æ—Å')
    }

    const isStudent = ctx.user.role !== UserRole.Teacher
    if (isStudent) {
      const groups = await parser.getGroups({ display: ctx.message.text })

      if (!groups.length) {
        return await ctx.reply('ü©º –¢–∞–∫–∏—Ö –≥—Ä—É–ø–ø —è –Ω–µ –≤–∏–¥–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä')
      }

      ctx.user.choosing_groups = groups.map(g => ({ id: g.id, display: g.display }))
      ctx.user.state = UserState.ChoosingFollowingEntity
      await ctx.user.save()

      await ctx.reply('üëû –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', {
        reply_markup: batchButtons(
          ctx.user.choosing_groups
            .map(g => Markup.button.callback(g.display!, callbackIdBuild('select_entity', [ g.id! ])))
        ).reply_markup
      })

      await ctx.reply('ü§®', {
        reply_markup: replyKeyboards[ctx.user.state].resize().reply_markup
      })
    } else if (ctx.user.role === UserRole.Teacher) {
      const teachers = await keeper.getTeachers({ name: ctx.message.text })

      if (!teachers.length) {
        return await ctx.reply('ü´ê –¢–∞–∫–∏—Ö —è –Ω–µ –≤–∏–¥–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
      }

      ctx.user.choosing_teachers = teachers
      ctx.user.state = UserState.ChoosingFollowingEntity
      await ctx.user.save()

      await ctx.reply('üëû –í—ã–±–µ—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', {
        reply_markup: batchButtons(
          ctx.user.choosing_teachers
            .map(t => Markup.button.callback(t, callbackIdBuild('select_entity', [ t ])))
        ).reply_markup
      })

      await ctx.reply('ü§®', {
        reply_markup: replyKeyboards[ctx.user.state].resize().reply_markup
      })
    }
  }
})